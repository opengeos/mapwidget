{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mapwidget","text":"<p>Custom Jupyter widgets for creating interactive maps with bidirectional communication</p> <p>The mapwidget package provides a set of custom map widgets for creating interactive maps in a Jupyter environment using different JavaScript mapping libraries, such as Cesium, Leaflet, Mapbox, MapLibre, and OpenLayers. The widgets are built on top of the anywidget Python package.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://mapwidget.gishub.org</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Cesium</li> <li>Leaflet</li> <li>Mapbox</li> <li>MapLibre</li> <li>OpenLayers</li> </ul>"},{"location":"#demos","title":"Demos","text":""},{"location":"#cesium","title":"Cesium","text":""},{"location":"#mapbox","title":"Mapbox","text":""},{"location":"#maplibre","title":"MapLibre","text":""},{"location":"basemaps/","title":"basemaps module","text":"<p>Module for basemaps.</p>"},{"location":"basemaps/#mapwidget.basemaps.get_basemap_list","title":"<code>get_basemap_list(free_only=True)</code>","text":"<p>Returns a list of xyz services.</p> <p>Parameters:</p> Name Type Description Default <code>free_only</code> <code>bool</code> <p>Whether to return only free xyz tile services that do not require an access token. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of xyz services.</p> Source code in <code>mapwidget/basemaps.py</code> <pre><code>def get_basemap_list(free_only=True):\n    \"\"\"Returns a list of xyz services.\n\n    Args:\n        free_only (bool, optional): Whether to return only free xyz tile services that do not require an access token. Defaults to True.\n\n    Returns:\n        list: A list of xyz services.\n    \"\"\"\n\n    return list(get_xyz_dict(free_only).keys())\n</code></pre>"},{"location":"basemaps/#mapwidget.basemaps.get_xyz_dict","title":"<code>get_xyz_dict(free_only=True)</code>","text":"<p>Returns a dictionary of xyz services.</p> <p>Parameters:</p> Name Type Description Default <code>free_only</code> <code>bool</code> <p>Whether to return only free xyz tile services that do not require an access token. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary of xyz services.</p> Source code in <code>mapwidget/basemaps.py</code> <pre><code>def get_xyz_dict(free_only=True):\n    \"\"\"Returns a dictionary of xyz services.\n\n    Args:\n        free_only (bool, optional): Whether to return only free xyz tile services that do not require an access token. Defaults to True.\n\n    Returns:\n        dict: A dictionary of xyz services.\n    \"\"\"\n\n    xyz_dict = {}\n    for item in xyz.values():\n        try:\n            name = item[\"name\"]\n            tile = _unpack_sub_parameters(xyz, name)\n            if _unpack_sub_parameters(xyz, name).requires_token():\n                if free_only:\n                    pass\n                else:\n                    xyz_dict[name] = tile\n            else:\n                xyz_dict[name] = tile\n\n        except Exception:\n            for sub_item in item:\n                name = item[sub_item][\"name\"]\n                tile = _unpack_sub_parameters(xyz, name)\n                if _unpack_sub_parameters(xyz, name).requires_token():\n                    if free_only:\n                        pass\n                    else:\n                        xyz_dict[name] = tile\n                else:\n                    xyz_dict[name] = tile\n\n    xyz_dict = collections.OrderedDict(sorted(xyz_dict.items()))\n\n    tiles = xyz_tiles\n\n    for item in xyz_dict:\n        name = xyz_dict[item].name\n        url = xyz_dict[item].build_url()\n        attribution = xyz_dict[item].attribution\n        if \"max_zoom\" in xyz_dict[item].keys():\n            max_zoom = xyz_dict[item][\"max_zoom\"]\n        else:\n            max_zoom = 24\n\n        tiles[item] = {\n            \"name\": name,\n            \"url\": url,\n            \"attribution\": attribution,\n            \"max_zoom\": max_zoom,\n        }\n\n    return tiles\n</code></pre>"},{"location":"cesium/","title":"cesium module","text":""},{"location":"cesium/#mapwidget.cesium.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>AnyWidget</code></p> <p>Map widget</p> <p>Parameters:</p> Name Type Description Default <code>anywidget</code> <code>_type_</code> <p>description</p> required Source code in <code>mapwidget/cesium.py</code> <pre><code>class Map(anywidget.AnyWidget):\n    \"\"\"Map widget\n\n    Args:\n        anywidget (_type_): _description_\n    \"\"\"\n\n    _cwd = os.path.dirname(os.path.abspath(__file__))\n    _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"cesium.js\"))\n    _css = pathlib.Path(os.path.join(_cwd, \"css\", \"cesium.css\"))\n    default_token = os.environ.get(\"CESIUM_TOKEN\")\n    token = traitlets.Unicode(default_token).tag(sync=True)\n    center = traitlets.List([40, -100]).tag(sync=True, o=True)\n    zoom = traitlets.Float(4).tag(sync=True, o=True)\n    bounds = traitlets.List([0, 0, 0, 0]).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n    clicked_latlng = traitlets.List([None, None]).tag(sync=True, o=True)\n    altitude = traitlets.Float(0).tag(sync=True, o=True)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v012-mar-22-2023","title":"v0.1.2 - Mar 22, 2023","text":"<ul> <li>Added basemaps module (#9)</li> </ul>"},{"location":"changelog/#v011-mar-22-2023","title":"v0.1.1 - Mar 22, 2023","text":"<ul> <li>Added Dockerfile and docker image (#7)</li> <li>Updated mapbox and cesium notebooks (#6)</li> <li>Added badges</li> </ul>"},{"location":"changelog/#v010-mar-20-2023","title":"v0.1.0 - Mar 20, 2023","text":"<ul> <li>Added notebook examples</li> </ul>"},{"location":"changelog/#v006-mar-18-2023","title":"v0.0.6 - Mar 18, 2023","text":"<ul> <li>Updated mapbox and maplibre modules to use ESM</li> </ul>"},{"location":"changelog/#v005-mar-18-2023","title":"v0.0.5 - Mar 18, 2023","text":"<ul> <li>Added mapbox, maplibre, and openlayers modules</li> </ul>"},{"location":"changelog/#v004-mar-18-2023","title":"v0.0.4 - Mar 18, 2023","text":"<ul> <li>Added js and styles to sdist</li> </ul>"},{"location":"changelog/#v003-mar-18-2023","title":"v0.0.3 - Mar 18, 2023","text":"<ul> <li>Added Cesium module</li> </ul>"},{"location":"changelog/#v002-jan-23-2023","title":"v0.0.2 - Jan 23, 2023","text":"<ul> <li>Added Map class</li> </ul>"},{"location":"changelog/#v001-jan-22-2023","title":"v0.0.1 - Jan 22, 2023","text":"<ul> <li>Initial release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/mapwidget/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>mapwidget could always use more documentation, whether as part of the official mapwidget docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/mapwidget/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up mapwidget for local development.</p> <ol> <li> <p>Fork the mapwidget repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/mapwidget.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv mapwidget\n$ cd mapwidget/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 mapwidget tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/opengeos/mapwidget/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>mapwdiget is available on PyPI. To install mapwidget, run this command in your terminal:</p> <pre><code>pip install mapwidget\n</code></pre>"},{"location":"installation/#install-from-conda-forge","title":"Install from conda-forge","text":"<p>mapwidget is also available on conda-forge. If you have Anaconda or Miniconda installed on your computer, you can install mapwidget using the following command:</p> <pre><code>conda install -c conda-forge mapwidget\n</code></pre>"},{"location":"installation/#use-docker","title":"Use docker","text":"<p>You can also use docker to run mapwidget:</p> <pre><code>docker run -it -p 8888:8888 opengeos/mapwidget:latest\n</code></pre>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for mapwidget can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/opengeos/mapwidget\n</code></pre>"},{"location":"leaflet/","title":"leaflet module","text":""},{"location":"leaflet/#mapwidget.leaflet.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>AnyWidget</code></p> <p>Map widget</p> <p>Parameters:</p> Name Type Description Default <code>anywidget</code> <code>_type_</code> <p>description</p> required Source code in <code>mapwidget/leaflet.py</code> <pre><code>class Map(anywidget.AnyWidget):\n    \"\"\"Map widget\n\n    Args:\n        anywidget (_type_): _description_\n    \"\"\"\n\n    _cwd = os.path.dirname(os.path.abspath(__file__))\n    _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"leaflet.js\"))\n    _css = pathlib.Path(os.path.join(_cwd, \"css\", \"leaflet.css\"))\n    center = traitlets.List([40, -100]).tag(sync=True, o=True)\n    zoom = traitlets.Int(4).tag(sync=True, o=True)\n    bounds = traitlets.List([0, 0, 0, 0]).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n    clicked_latlng = traitlets.List([None, None]).tag(sync=True, o=True)\n\n    def add_basemap(self, name, opacity=1.0, **kwargs):\n        from .basemaps import get_xyz_dict\n\n        xyz_tiles = get_xyz_dict()\n\n        if name in xyz_tiles:\n            url = xyz_tiles[name][\"url\"]\n            attribution = xyz_tiles[name][\"attribution\"]\n            max_zoom = xyz_tiles[name][\"max_zoom\"]\n            self.send(\n                {\n                    \"type\": \"add_basemap\",\n                    \"url\": url,\n                    \"attribution\": attribution,\n                    \"maxZoom\": max_zoom,\n                    \"opacity\": opacity,\n                    \"name\": name,\n                }\n            )\n\n        else:\n            raise ValueError(\n                f\"Basemap {name} not found. It must be one of the following: {list(xyz_tiles.keys())}\"\n            )\n\n    def add_layer(\n        self, url, name=\"Layer\", attribution=\"\", max_zoom=24, opacity=1.0, **kwargs\n    ):\n        self.send(\n            {\n                \"type\": \"add_layer\",\n                \"url\": url,\n                \"attribution\": attribution,\n                \"maxZoom\": max_zoom,\n                \"name\": name,\n                \"opacity\": opacity,\n            }\n        )\n</code></pre>"},{"location":"mapbox/","title":"mapbox module","text":""},{"location":"mapbox/#mapwidget.mapbox.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>AnyWidget</code></p> <p>Create a Mapbox map widget.</p> Source code in <code>mapwidget/mapbox.py</code> <pre><code>class Map(anywidget.AnyWidget):\n    \"\"\"Create a Mapbox map widget.\"\"\"\n\n    _cwd = os.path.dirname(os.path.abspath(__file__))\n    _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"mapbox.js\"))\n    _css = pathlib.Path(os.path.join(_cwd, \"css\", \"mapbox.css\"))\n    default_token = os.environ.get(\"MAPBOX_TOKEN\")\n    token = traitlets.Unicode(default_token).tag(sync=True)\n    center = traitlets.List([0, 20]).tag(sync=True, o=True)\n    zoom = traitlets.Float(2).tag(sync=True, o=True)\n    bounds = traitlets.List([0, 0, 0, 0]).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n    clicked_latlng = traitlets.List([None, None]).tag(sync=True, o=True)\n\n    def set_esm(self, esm, container=\"map\"):\n        \"\"\"Set esm attribute. Can be a string, a file path, or a url.\n            See examples at https://docs.mapbox.com/mapbox-gl-js/example/\n            Open an example and click on the 'Edit in CodePen' button.\n            Then copy the code from the 'JS' tab, and assign it to the esm parameter.\n\n        Args:\n            esm (str): The esm string, file path, or url.\n            container (str, optional): The container name. Defaults to 'map'.\n\n        Raises:\n            TypeError: If esm is not a string.\n        \"\"\"\n        if isinstance(esm, str):\n            if os.path.isfile(esm):\n                with open(esm, \"r\") as f:\n                    content = f.read()\n            elif esm.startswith(\"http\"):\n                import urllib.request\n\n                with urllib.request.urlopen(esm) as response:\n                    content = response.read().decode(\"utf-8\")\n            else:\n                content = esm\n\n            self._esm = self._create_esm(content, container=container)\n\n        else:\n            raise TypeError(\"esm must be a string\")\n\n    def set_css(self, css, container=\"map\"):\n        \"\"\"Set css attribute. Can be a string, a file path, or a url.\n            See examples at https://docs.mapbox.com/mapbox-gl-js/example/\n            Open an example and click on the 'Edit in CodePen' button.\n            Then copy the code from the 'CSS' tab, and assign it to the css parameter.\n        Args:\n            css (str): The css string, file path, or url.\n\n        Raises:\n            TypeError: If css is not a string.\n        \"\"\"\n        if isinstance(css, str):\n            if os.path.isfile(css):\n                with open(css, \"r\") as f:\n                    content = f.read()\n            elif css.startswith(\"http\"):\n                import urllib.request\n\n                with urllib.request.urlopen(css) as response:\n                    content = response.read().decode(\"utf-8\")\n            else:\n                content = css\n\n            self._css = content.replace(f\"#{container}\", f\"#div\").replace(\n                f\".{container}\", f\".div\"\n            )\n        else:\n            raise TypeError(\"css must be a string\")\n\n    def _create_esm(self, esm, container=\"map\"):\n        \"\"\"Create esm string by replacing the container name.\n\n        Args:\n            esm (str): The esm string.\n            container (str, optional): The container name. Defaults to 'map'.\n\n        Returns:\n            str: The esm string with the container name replaced.\n        \"\"\"\n        _cwd = os.path.dirname(os.path.abspath(__file__))\n        _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"mapbox.js\"))\n\n        with open(_esm, \"r\") as f:\n            lines = f.readlines()\n\n        header = []\n        footer = []\n\n        for index, line in enumerate(lines):\n            if line.strip() == \"// Map content\":\n                header = lines[: index + 1]\n                break\n\n        for index, line in enumerate(lines):\n            if line.strip() == \"// Footer\":\n                footer = lines[index:]\n                break\n\n        content = esm.replace(f\"'{container}'\", \"div\").replace(f'\"{container}\"', \"div\")\n        esm = \"\".join(header) + content + \"\".join(footer)\n\n        return esm\n\n    def _save_esm(self, output):\n        \"\"\"Save esm to file\n\n        Args:\n            output (str): The output file path.\n        \"\"\"\n\n        with open(output, \"w\") as f:\n            f.write(self._esm)\n</code></pre>"},{"location":"mapbox/#mapwidget.mapbox.Map.set_css","title":"<code>set_css(css, container='map')</code>","text":"<p>Set css attribute. Can be a string, a file path, or a url.     See examples at https://docs.mapbox.com/mapbox-gl-js/example/     Open an example and click on the 'Edit in CodePen' button.     Then copy the code from the 'CSS' tab, and assign it to the css parameter. Args:     css (str): The css string, file path, or url.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If css is not a string.</p> Source code in <code>mapwidget/mapbox.py</code> <pre><code>def set_css(self, css, container=\"map\"):\n    \"\"\"Set css attribute. Can be a string, a file path, or a url.\n        See examples at https://docs.mapbox.com/mapbox-gl-js/example/\n        Open an example and click on the 'Edit in CodePen' button.\n        Then copy the code from the 'CSS' tab, and assign it to the css parameter.\n    Args:\n        css (str): The css string, file path, or url.\n\n    Raises:\n        TypeError: If css is not a string.\n    \"\"\"\n    if isinstance(css, str):\n        if os.path.isfile(css):\n            with open(css, \"r\") as f:\n                content = f.read()\n        elif css.startswith(\"http\"):\n            import urllib.request\n\n            with urllib.request.urlopen(css) as response:\n                content = response.read().decode(\"utf-8\")\n        else:\n            content = css\n\n        self._css = content.replace(f\"#{container}\", f\"#div\").replace(\n            f\".{container}\", f\".div\"\n        )\n    else:\n        raise TypeError(\"css must be a string\")\n</code></pre>"},{"location":"mapbox/#mapwidget.mapbox.Map.set_esm","title":"<code>set_esm(esm, container='map')</code>","text":"<p>Set esm attribute. Can be a string, a file path, or a url.     See examples at https://docs.mapbox.com/mapbox-gl-js/example/     Open an example and click on the 'Edit in CodePen' button.     Then copy the code from the 'JS' tab, and assign it to the esm parameter.</p> <p>Parameters:</p> Name Type Description Default <code>esm</code> <code>str</code> <p>The esm string, file path, or url.</p> required <code>container</code> <code>str</code> <p>The container name. Defaults to 'map'.</p> <code>'map'</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If esm is not a string.</p> Source code in <code>mapwidget/mapbox.py</code> <pre><code>def set_esm(self, esm, container=\"map\"):\n    \"\"\"Set esm attribute. Can be a string, a file path, or a url.\n        See examples at https://docs.mapbox.com/mapbox-gl-js/example/\n        Open an example and click on the 'Edit in CodePen' button.\n        Then copy the code from the 'JS' tab, and assign it to the esm parameter.\n\n    Args:\n        esm (str): The esm string, file path, or url.\n        container (str, optional): The container name. Defaults to 'map'.\n\n    Raises:\n        TypeError: If esm is not a string.\n    \"\"\"\n    if isinstance(esm, str):\n        if os.path.isfile(esm):\n            with open(esm, \"r\") as f:\n                content = f.read()\n        elif esm.startswith(\"http\"):\n            import urllib.request\n\n            with urllib.request.urlopen(esm) as response:\n                content = response.read().decode(\"utf-8\")\n        else:\n            content = esm\n\n        self._esm = self._create_esm(content, container=container)\n\n    else:\n        raise TypeError(\"esm must be a string\")\n</code></pre>"},{"location":"maplibre/","title":"maplibre module","text":""},{"location":"maplibre/#mapwidget.maplibre.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>AnyWidget</code></p> <p>Create a MapLibre map widget.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>class Map(anywidget.AnyWidget):\n    \"\"\"Create a MapLibre map widget.\"\"\"\n\n    _cwd = os.path.dirname(os.path.abspath(__file__))\n    _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"maplibre.js\"))\n    _css = pathlib.Path(os.path.join(_cwd, \"css\", \"maplibre.css\"))\n    center = traitlets.List([0, 20]).tag(sync=True, o=True)\n    zoom = traitlets.Float(2).tag(sync=True, o=True)\n    bearing = traitlets.Float(0).tag(sync=True, o=True)\n    pitch = traitlets.Float(0).tag(sync=True, o=True)\n    bounds = traitlets.List([0, 0, 0, 0]).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n    clicked_latlng = traitlets.List([None, None]).tag(sync=True, o=True)\n    calls = traitlets.List(traitlets.Dict(), default_value=[]).tag(sync=True, o=True)\n    view_state = traitlets.Dict().tag(sync=True)\n    root = traitlets.Dict().tag(sync=True)\n    sources = traitlets.Dict().tag(sync=True)\n    loaded = traitlets.Bool(False).tag(sync=True)\n    controls = traitlets.List(traitlets.Dict(), default_value=[]).tag(sync=True, o=True)\n    style = traitlets.Any().tag(sync=True)\n\n    def __init__(\n        self,\n        center=[0, 20],\n        zoom=2,\n        bearing=0,\n        pitch=0,\n        style=\"https://tiles.openfreemap.org/styles/liberty\",\n        controls=None,\n        **kwargs\n    ):\n        \"\"\"Initialize the Map widget.\n\n        Args:\n            center: Initial center [lng, lat]. Defaults to [0, 20]\n            zoom: Initial zoom level. Defaults to 2\n            controls: List of controls to add by default. Defaults to [\"navigation\", \"fullscreen\", \"globe\"]\n            **kwargs: Additional widget parameters\n        \"\"\"\n        super().__init__(\n            center=center,\n            zoom=zoom,\n            bearing=bearing,\n            pitch=pitch,\n            style=style,\n            **kwargs\n        )\n\n        # Store default controls to add after initialization\n        self._default_controls = (\n            controls if controls is not None else [\"navigation\", \"fullscreen\", \"globe\"]\n        )\n\n        # Add default controls after widget is ready\n        self.observe(self._add_default_controls, names=\"loaded\")\n\n    def _add_default_controls(self, change):\n        \"\"\"Add default controls when the map is loaded.\"\"\"\n        if change[\"new\"] and self._default_controls:\n            for control in self._default_controls:\n                self.add_control(control, \"top-right\")\n            self._default_controls = []  # Clear to avoid re-adding\n\n    @property\n    def layers(self):\n        \"\"\"Get the current style of the map.\"\"\"\n        return self.style.get(\"layers\", [])\n\n    @property\n    def layer_names(self):\n        \"\"\"Get the names of the layers in the map.\"\"\"\n        return [layer[\"id\"] for layer in self.layers]\n\n    def add_call(self, method: str, args: list = None, kwargs: dict = None):\n        \"\"\"Invoke a JS map method with arguments.\"\"\"\n        if args is None:\n            args = []\n        if kwargs is None:\n            kwargs = {}\n        self.calls = self.calls + [{\"method\": method, \"args\": args, \"kwargs\": kwargs}]\n\n    def set_center(self, lng: float, lat: float):\n        \"\"\"Set the center of the map.\"\"\"\n        self.add_call(\"setCenter\", [[lng, lat]])\n\n    def set_zoom(self, zoom: float):\n        \"\"\"Set the zoom level.\"\"\"\n        self.add_call(\"setZoom\", [zoom])\n\n    def pan_to(self, lng: float, lat: float):\n        \"\"\"Pan the map to a given location.\"\"\"\n        self.add_call(\"panTo\", [[lng, lat]])\n\n    def fly_to(self, center=None, zoom=None, bearing=None, pitch=None):\n        \"\"\"Fly to a given location with optional zoom, bearing, and pitch.\"\"\"\n        options = {}\n        if center:\n            options[\"center\"] = center\n        if zoom is not None:\n            options[\"zoom\"] = zoom\n        if bearing is not None:\n            options[\"bearing\"] = bearing\n        if pitch is not None:\n            options[\"pitch\"] = pitch\n        self.add_call(\"flyTo\", [options])\n\n    def fit_bounds(self, bounds: list, options: dict = None):\n        \"\"\"Fit the map to given bounds [[west, south], [east, north]].\"\"\"\n        args = [bounds]\n        if options:\n            args.append(options)\n        self.add_call(\"fitBounds\", args)\n\n    def set_pitch(self, pitch: float):\n        \"\"\"Set the pitch of the map.\"\"\"\n        self.add_call(\"setPitch\", [pitch])\n\n    def set_bearing(self, bearing: float):\n        \"\"\"Set the bearing of the map.\"\"\"\n        self.add_call(\"setBearing\", [bearing])\n\n    def resize(self):\n        \"\"\"Trigger map resize.\"\"\"\n        self.add_call(\"resize\")\n\n    def add_source(self, source_id: str, source: dict):\n        \"\"\"Add a new source to the map.\"\"\"\n        self.add_call(\"addSource\", [source_id, source])\n\n    def remove_source(self, source_id: str):\n        \"\"\"Remove a source from the map.\"\"\"\n        self.add_call(\"removeSource\", [source_id])\n\n    def add_layer(self, layer: dict, before_id: str = None):\n        \"\"\"Add a new layer to the map.\"\"\"\n        args = [layer]\n        if before_id:\n            args.append(before_id)\n        self.add_call(\"addLayer\", args)\n\n    def remove_layer(self, layer_id: str):\n        \"\"\"Remove a layer from the map.\"\"\"\n        self.add_call(\"removeLayer\", [layer_id])\n\n    def set_paint_property(self, layer_id: str, prop: str, value):\n        \"\"\"Set a paint property on a layer.\"\"\"\n        self.add_call(\"setPaintProperty\", [layer_id, prop, value])\n\n    def set_layout_property(self, layer_id: str, prop: str, value):\n        \"\"\"Set a layout property on a layer.\"\"\"\n        self.add_call(\"setLayoutProperty\", [layer_id, prop, value])\n\n    def set_filter(self, layer_id: str, filter_expr):\n        \"\"\"Set a filter expression on a layer.\"\"\"\n        self.add_call(\"setFilter\", [layer_id, filter_expr])\n\n    def set_style(self, style_url: str):\n        \"\"\"Set the map style.\"\"\"\n        self.add_call(\"setStyle\", [style_url])\n\n    def set_layer_visibility(self, layer_id: str, visibility: str):\n        \"\"\"Set visibility of a layer ('visible' or 'none').\"\"\"\n        self.set_layout_property(layer_id, \"visibility\", visibility)\n\n    def add_control(\n        self, control_type: str, position: str = \"top-right\", options: dict = None\n    ):\n        \"\"\"Add a control to the map.\n\n        Args:\n            control_type: Type of control to add. Options include:\n                - 'navigation' or 'NavigationControl'\n                - 'geolocate' or 'GeolocateControl'\n                - 'scale' or 'ScaleControl'\n                - 'fullscreen' or 'FullscreenControl'\n                - 'attribution' or 'AttributionControl'\n                - 'globe' or 'GlobeControl'\n                - 'logo' or 'LogoControl'\n                - 'terrain' or 'TerrainControl'\n            position: Position on the map. Options: 'top-left', 'top-right', 'bottom-left', 'bottom-right'\n            options: Optional configuration for the control\n        \"\"\"\n        if options is None:\n            options = {}\n        self.add_call(\"addControl\", [control_type, position, options])\n        self.controls.append(\n            {\"type\": control_type, \"position\": position, \"options\": options}\n        )\n\n    def remove_control(self, control_type: str):\n        \"\"\"Remove a control from the map.\n\n        Args:\n            control_type: The type of control to remove (e.g., 'navigation', 'fullscreen')\n        \"\"\"\n        self.add_call(\"removeControl\", [control_type])\n        self.controls = [\n            control for control in self.controls if control[\"type\"] != control_type\n        ]\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.layer_names","title":"<code>layer_names</code>  <code>property</code>","text":"<p>Get the names of the layers in the map.</p>"},{"location":"maplibre/#mapwidget.maplibre.Map.layers","title":"<code>layers</code>  <code>property</code>","text":"<p>Get the current style of the map.</p>"},{"location":"maplibre/#mapwidget.maplibre.Map.__init__","title":"<code>__init__(center=[0, 20], zoom=2, bearing=0, pitch=0, style='https://tiles.openfreemap.org/styles/liberty', controls=None, **kwargs)</code>","text":"<p>Initialize the Map widget.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <p>Initial center [lng, lat]. Defaults to [0, 20]</p> <code>[0, 20]</code> <code>zoom</code> <p>Initial zoom level. Defaults to 2</p> <code>2</code> <code>controls</code> <p>List of controls to add by default. Defaults to [\"navigation\", \"fullscreen\", \"globe\"]</p> <code>None</code> <code>**kwargs</code> <p>Additional widget parameters</p> <code>{}</code> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def __init__(\n    self,\n    center=[0, 20],\n    zoom=2,\n    bearing=0,\n    pitch=0,\n    style=\"https://tiles.openfreemap.org/styles/liberty\",\n    controls=None,\n    **kwargs\n):\n    \"\"\"Initialize the Map widget.\n\n    Args:\n        center: Initial center [lng, lat]. Defaults to [0, 20]\n        zoom: Initial zoom level. Defaults to 2\n        controls: List of controls to add by default. Defaults to [\"navigation\", \"fullscreen\", \"globe\"]\n        **kwargs: Additional widget parameters\n    \"\"\"\n    super().__init__(\n        center=center,\n        zoom=zoom,\n        bearing=bearing,\n        pitch=pitch,\n        style=style,\n        **kwargs\n    )\n\n    # Store default controls to add after initialization\n    self._default_controls = (\n        controls if controls is not None else [\"navigation\", \"fullscreen\", \"globe\"]\n    )\n\n    # Add default controls after widget is ready\n    self.observe(self._add_default_controls, names=\"loaded\")\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.add_call","title":"<code>add_call(method, args=None, kwargs=None)</code>","text":"<p>Invoke a JS map method with arguments.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def add_call(self, method: str, args: list = None, kwargs: dict = None):\n    \"\"\"Invoke a JS map method with arguments.\"\"\"\n    if args is None:\n        args = []\n    if kwargs is None:\n        kwargs = {}\n    self.calls = self.calls + [{\"method\": method, \"args\": args, \"kwargs\": kwargs}]\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.add_control","title":"<code>add_control(control_type, position='top-right', options=None)</code>","text":"<p>Add a control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>Type of control to add. Options include: - 'navigation' or 'NavigationControl' - 'geolocate' or 'GeolocateControl' - 'scale' or 'ScaleControl' - 'fullscreen' or 'FullscreenControl' - 'attribution' or 'AttributionControl' - 'globe' or 'GlobeControl' - 'logo' or 'LogoControl' - 'terrain' or 'TerrainControl'</p> required <code>position</code> <code>str</code> <p>Position on the map. Options: 'top-left', 'top-right', 'bottom-left', 'bottom-right'</p> <code>'top-right'</code> <code>options</code> <code>dict</code> <p>Optional configuration for the control</p> <code>None</code> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def add_control(\n    self, control_type: str, position: str = \"top-right\", options: dict = None\n):\n    \"\"\"Add a control to the map.\n\n    Args:\n        control_type: Type of control to add. Options include:\n            - 'navigation' or 'NavigationControl'\n            - 'geolocate' or 'GeolocateControl'\n            - 'scale' or 'ScaleControl'\n            - 'fullscreen' or 'FullscreenControl'\n            - 'attribution' or 'AttributionControl'\n            - 'globe' or 'GlobeControl'\n            - 'logo' or 'LogoControl'\n            - 'terrain' or 'TerrainControl'\n        position: Position on the map. Options: 'top-left', 'top-right', 'bottom-left', 'bottom-right'\n        options: Optional configuration for the control\n    \"\"\"\n    if options is None:\n        options = {}\n    self.add_call(\"addControl\", [control_type, position, options])\n    self.controls.append(\n        {\"type\": control_type, \"position\": position, \"options\": options}\n    )\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.add_layer","title":"<code>add_layer(layer, before_id=None)</code>","text":"<p>Add a new layer to the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def add_layer(self, layer: dict, before_id: str = None):\n    \"\"\"Add a new layer to the map.\"\"\"\n    args = [layer]\n    if before_id:\n        args.append(before_id)\n    self.add_call(\"addLayer\", args)\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.add_source","title":"<code>add_source(source_id, source)</code>","text":"<p>Add a new source to the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def add_source(self, source_id: str, source: dict):\n    \"\"\"Add a new source to the map.\"\"\"\n    self.add_call(\"addSource\", [source_id, source])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.fit_bounds","title":"<code>fit_bounds(bounds, options=None)</code>","text":"<p>Fit the map to given bounds [[west, south], [east, north]].</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def fit_bounds(self, bounds: list, options: dict = None):\n    \"\"\"Fit the map to given bounds [[west, south], [east, north]].\"\"\"\n    args = [bounds]\n    if options:\n        args.append(options)\n    self.add_call(\"fitBounds\", args)\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.fly_to","title":"<code>fly_to(center=None, zoom=None, bearing=None, pitch=None)</code>","text":"<p>Fly to a given location with optional zoom, bearing, and pitch.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def fly_to(self, center=None, zoom=None, bearing=None, pitch=None):\n    \"\"\"Fly to a given location with optional zoom, bearing, and pitch.\"\"\"\n    options = {}\n    if center:\n        options[\"center\"] = center\n    if zoom is not None:\n        options[\"zoom\"] = zoom\n    if bearing is not None:\n        options[\"bearing\"] = bearing\n    if pitch is not None:\n        options[\"pitch\"] = pitch\n    self.add_call(\"flyTo\", [options])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.pan_to","title":"<code>pan_to(lng, lat)</code>","text":"<p>Pan the map to a given location.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def pan_to(self, lng: float, lat: float):\n    \"\"\"Pan the map to a given location.\"\"\"\n    self.add_call(\"panTo\", [[lng, lat]])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.remove_control","title":"<code>remove_control(control_type)</code>","text":"<p>Remove a control from the map.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>str</code> <p>The type of control to remove (e.g., 'navigation', 'fullscreen')</p> required Source code in <code>mapwidget/maplibre.py</code> <pre><code>def remove_control(self, control_type: str):\n    \"\"\"Remove a control from the map.\n\n    Args:\n        control_type: The type of control to remove (e.g., 'navigation', 'fullscreen')\n    \"\"\"\n    self.add_call(\"removeControl\", [control_type])\n    self.controls = [\n        control for control in self.controls if control[\"type\"] != control_type\n    ]\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.remove_layer","title":"<code>remove_layer(layer_id)</code>","text":"<p>Remove a layer from the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def remove_layer(self, layer_id: str):\n    \"\"\"Remove a layer from the map.\"\"\"\n    self.add_call(\"removeLayer\", [layer_id])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.remove_source","title":"<code>remove_source(source_id)</code>","text":"<p>Remove a source from the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def remove_source(self, source_id: str):\n    \"\"\"Remove a source from the map.\"\"\"\n    self.add_call(\"removeSource\", [source_id])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.resize","title":"<code>resize()</code>","text":"<p>Trigger map resize.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def resize(self):\n    \"\"\"Trigger map resize.\"\"\"\n    self.add_call(\"resize\")\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_bearing","title":"<code>set_bearing(bearing)</code>","text":"<p>Set the bearing of the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_bearing(self, bearing: float):\n    \"\"\"Set the bearing of the map.\"\"\"\n    self.add_call(\"setBearing\", [bearing])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_center","title":"<code>set_center(lng, lat)</code>","text":"<p>Set the center of the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_center(self, lng: float, lat: float):\n    \"\"\"Set the center of the map.\"\"\"\n    self.add_call(\"setCenter\", [[lng, lat]])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_filter","title":"<code>set_filter(layer_id, filter_expr)</code>","text":"<p>Set a filter expression on a layer.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_filter(self, layer_id: str, filter_expr):\n    \"\"\"Set a filter expression on a layer.\"\"\"\n    self.add_call(\"setFilter\", [layer_id, filter_expr])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_layer_visibility","title":"<code>set_layer_visibility(layer_id, visibility)</code>","text":"<p>Set visibility of a layer ('visible' or 'none').</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_layer_visibility(self, layer_id: str, visibility: str):\n    \"\"\"Set visibility of a layer ('visible' or 'none').\"\"\"\n    self.set_layout_property(layer_id, \"visibility\", visibility)\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_layout_property","title":"<code>set_layout_property(layer_id, prop, value)</code>","text":"<p>Set a layout property on a layer.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_layout_property(self, layer_id: str, prop: str, value):\n    \"\"\"Set a layout property on a layer.\"\"\"\n    self.add_call(\"setLayoutProperty\", [layer_id, prop, value])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_paint_property","title":"<code>set_paint_property(layer_id, prop, value)</code>","text":"<p>Set a paint property on a layer.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_paint_property(self, layer_id: str, prop: str, value):\n    \"\"\"Set a paint property on a layer.\"\"\"\n    self.add_call(\"setPaintProperty\", [layer_id, prop, value])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_pitch","title":"<code>set_pitch(pitch)</code>","text":"<p>Set the pitch of the map.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_pitch(self, pitch: float):\n    \"\"\"Set the pitch of the map.\"\"\"\n    self.add_call(\"setPitch\", [pitch])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_style","title":"<code>set_style(style_url)</code>","text":"<p>Set the map style.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_style(self, style_url: str):\n    \"\"\"Set the map style.\"\"\"\n    self.add_call(\"setStyle\", [style_url])\n</code></pre>"},{"location":"maplibre/#mapwidget.maplibre.Map.set_zoom","title":"<code>set_zoom(zoom)</code>","text":"<p>Set the zoom level.</p> Source code in <code>mapwidget/maplibre.py</code> <pre><code>def set_zoom(self, zoom: float):\n    \"\"\"Set the zoom level.\"\"\"\n    self.add_call(\"setZoom\", [zoom])\n</code></pre>"},{"location":"openlayers/","title":"openlayers module","text":""},{"location":"openlayers/#mapwidget.openlayers.Map","title":"<code>Map</code>","text":"<p>               Bases: <code>AnyWidget</code></p> <p>Map widget</p> <p>Parameters:</p> Name Type Description Default <code>anywidget</code> <code>_type_</code> <p>description</p> required Source code in <code>mapwidget/openlayers.py</code> <pre><code>class Map(anywidget.AnyWidget):\n    \"\"\"Map widget\n\n    Args:\n        anywidget (_type_): _description_\n    \"\"\"\n\n    _cwd = os.path.dirname(os.path.abspath(__file__))\n    _esm = pathlib.Path(os.path.join(_cwd, \"js\", \"openlayers.js\"))\n    _css = pathlib.Path(os.path.join(_cwd, \"css\", \"openlayers.css\"))\n    center = traitlets.List([0, 20]).tag(sync=True, o=True)\n    zoom = traitlets.Float(2).tag(sync=True, o=True)\n    bounds = traitlets.List([0, 0, 0, 0]).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n    clicked_latlng = traitlets.List([None, None]).tag(sync=True, o=True)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use mapwidget in a project:</p> <pre><code>import mapwidget\n</code></pre>"},{"location":"examples/cesium/","title":"Cesium","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import os\nimport mapwidget.cesium as mapwidget\n</pre> import os import mapwidget.cesium as mapwidget <p>You need a Cesium access token to use the Cesium widget. First, sign up for a free Cesium account. Then, you can create a token by following the instructions here. Set <code>CESIUM_TOKEN</code> as an environment variable to use the Cesium widget. Alternatively, uncomment the following code block and replace <code>YOUR-CESIUM-TOKEN</code> with your Cesium access token.</p> In\u00a0[\u00a0]: Copied! <pre>if os.environ.get(\"CESIUM_TOKEN\") is None:\n    token = \"YOUR-CESIUM-TOKEN\"\nelse:\n    token = os.environ.get(\"CESIUM_TOKEN\")\n</pre> if os.environ.get(\"CESIUM_TOKEN\") is None:     token = \"YOUR-CESIUM-TOKEN\" else:     token = os.environ.get(\"CESIUM_TOKEN\") <p>San Francisco</p> In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map(center=[37.655, -122.4175], altitude=400, height=\"600px\", token=token)\nm\n</pre> m = mapwidget.Map(center=[37.655, -122.4175], altitude=400, height=\"600px\", token=token) m <p></p> <p>New York City</p> In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map(\n    center=[40.70605, -74.01177], altitude=600, height=\"600px\", token=token\n)\nm\n</pre> m = mapwidget.Map(     center=[40.70605, -74.01177], altitude=600, height=\"600px\", token=token ) m <p></p> In\u00a0[\u00a0]: Copied! <pre>m.center\n</pre> m.center In\u00a0[\u00a0]: Copied! <pre>m.zoom\n</pre> m.zoom"},{"location":"examples/esm/","title":"Esm","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import os\nimport anywidget\nimport traitlets\n</pre> import os import anywidget import traitlets In\u00a0[\u00a0]: Copied! <pre>class MapWidget(anywidget.AnyWidget):\n    _esm = \"\"\"\n    import * as L from \"https://esm.sh/leaflet@1.9.3\";\n    export function render(view) {\n    \n            let center = view.model.get(\"center\");\n            let zoom = view.model.get(\"zoom\");\n            let width = view.model.get(\"width\");\n            let height = view.model.get(\"height\");\n            \n            const container = document.createElement(\"div\");     \n            container.style.width = width;       \n            container.style.height = height;\n            \n            const map = L.map(container).setView(center, zoom);\n            L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                attribution: 'Map data &amp;copy; &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors',\n                maxZoom: 24,\n            }).addTo(map);\n            \n            view.el.appendChild(container);\n        }\n    \"\"\"\n\n    _css = \"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\"\n\n    center = traitlets.List([20, 0]).tag(sync=True, o=True)\n    zoom = traitlets.Int(2).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n\n\nm = MapWidget(center=[20, 0], zoom=2, height=\"600px\")\nm\n</pre> class MapWidget(anywidget.AnyWidget):     _esm = \"\"\"     import * as L from \"https://esm.sh/leaflet@1.9.3\";     export function render(view) {                  let center = view.model.get(\"center\");             let zoom = view.model.get(\"zoom\");             let width = view.model.get(\"width\");             let height = view.model.get(\"height\");                          const container = document.createElement(\"div\");                  container.style.width = width;                    container.style.height = height;                          const map = L.map(container).setView(center, zoom);             L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {                 attribution: 'Map data \u00a9 OpenStreetMap contributors',                 maxZoom: 24,             }).addTo(map);                          view.el.appendChild(container);         }     \"\"\"      _css = \"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\"      center = traitlets.List([20, 0]).tag(sync=True, o=True)     zoom = traitlets.Int(2).tag(sync=True, o=True)     width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)     height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)   m = MapWidget(center=[20, 0], zoom=2, height=\"600px\") m In\u00a0[\u00a0]: Copied! <pre>class MapWidget(anywidget.AnyWidget):\n    _esm = \"\"\"\n    import maplibregl from \"https://esm.sh/maplibre-gl@2.4.0\";\n\n    export function render(view) {\n    \n        let center = view.model.get(\"center\");\n        center.reverse();\n        let zoom = view.model.get(\"zoom\");\n        let width = view.model.get(\"width\");\n        let height = view.model.get(\"height\");\n\n        const div = document.createElement(\"div\");\n        div.style.width = width;\n        div.style.height = height;\n\n        const map = new maplibregl.Map({\n          container: div,\n          style: 'https://demotiles.maplibre.org/style.json', // stylesheet location\n          center: center, // starting position [lng, lat]\n          zoom: zoom // starting zoom\n        });\n        view.el.appendChild(div);\n    }\n    \"\"\"\n    _css = \"https://esm.sh/maplibre-gl@2.4.0?css\"\n\n    center = traitlets.List([20, 0]).tag(sync=True, o=True)\n    zoom = traitlets.Int(2).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n\n\nm = MapWidget(center=[20, 0], zoom=2)\nm\n</pre> class MapWidget(anywidget.AnyWidget):     _esm = \"\"\"     import maplibregl from \"https://esm.sh/maplibre-gl@2.4.0\";      export function render(view) {              let center = view.model.get(\"center\");         center.reverse();         let zoom = view.model.get(\"zoom\");         let width = view.model.get(\"width\");         let height = view.model.get(\"height\");          const div = document.createElement(\"div\");         div.style.width = width;         div.style.height = height;          const map = new maplibregl.Map({           container: div,           style: 'https://demotiles.maplibre.org/style.json', // stylesheet location           center: center, // starting position [lng, lat]           zoom: zoom // starting zoom         });         view.el.appendChild(div);     }     \"\"\"     _css = \"https://esm.sh/maplibre-gl@2.4.0?css\"      center = traitlets.List([20, 0]).tag(sync=True, o=True)     zoom = traitlets.Int(2).tag(sync=True, o=True)     width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)     height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)   m = MapWidget(center=[20, 0], zoom=2) m In\u00a0[\u00a0]: Copied! <pre>class MapWidget(anywidget.AnyWidget):\n    _esm = \"\"\"\n    import mapboxgl from \"https://esm.sh/mapbox-gl@2.13.0\";\n\n    export function render(view) {\n        let center = view.model.get(\"center\");\n        center.reverse();\n        let zoom = view.model.get(\"zoom\");\n        let width = view.model.get(\"width\");\n        let height = view.model.get(\"height\");\n\n        const div = document.createElement(\"div\");\n        div.style.width = width;\n        div.style.height = height;\n\n        let token = view.model.get(\"token\");\n\n        mapboxgl.accessToken = token;\n        const map = new mapboxgl.Map({\n            container: div,\n            style: \"mapbox://styles/mapbox/streets-v12\",\n            center: center,\n            zoom: zoom,\n        });\n        view.el.appendChild(div);\n    }\n\n    \"\"\"\n    _css = \"https://esm.sh/mapbox-gl@2.13.0?css\"\n\n    default_token = os.environ.get(\"MAPBOX_TOKEN\")\n    token = traitlets.Unicode(default_token).tag(sync=True)\n    center = traitlets.List([20, 0]).tag(sync=True, o=True)\n    zoom = traitlets.Int(2).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n\n\nm = MapWidget(center=[20, 0], zoom=2)\nm\n</pre> class MapWidget(anywidget.AnyWidget):     _esm = \"\"\"     import mapboxgl from \"https://esm.sh/mapbox-gl@2.13.0\";      export function render(view) {         let center = view.model.get(\"center\");         center.reverse();         let zoom = view.model.get(\"zoom\");         let width = view.model.get(\"width\");         let height = view.model.get(\"height\");          const div = document.createElement(\"div\");         div.style.width = width;         div.style.height = height;          let token = view.model.get(\"token\");          mapboxgl.accessToken = token;         const map = new mapboxgl.Map({             container: div,             style: \"mapbox://styles/mapbox/streets-v12\",             center: center,             zoom: zoom,         });         view.el.appendChild(div);     }      \"\"\"     _css = \"https://esm.sh/mapbox-gl@2.13.0?css\"      default_token = os.environ.get(\"MAPBOX_TOKEN\")     token = traitlets.Unicode(default_token).tag(sync=True)     center = traitlets.List([20, 0]).tag(sync=True, o=True)     zoom = traitlets.Int(2).tag(sync=True, o=True)     width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)     height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)   m = MapWidget(center=[20, 0], zoom=2) m In\u00a0[\u00a0]: Copied! <pre>class MapWidget(anywidget.AnyWidget):\n    _esm = \"\"\"\n    function loadScript(src) {\n      return new Promise((resolve, reject) =&gt; {\n        let script = Object.assign(document.createElement(\"script\"), {\n          type: \"text/javascript\",\n          async: true,\n          src: src,\n        });\n        script.addEventListener(\"load\", resolve);\n        script.addEventListener(\"error\", reject);\n        document.body.appendChild(script);\n      });\n    };\n    \n    await loadScript(\"https://cesium.com/downloads/cesiumjs/releases/1.103/Build/Cesium/Cesium.js\");\n    \n    export function render(view) {\n    \n      let width = view.model.get(\"width\");\n      let height = view.model.get(\"height\");\n        \n      const div = document.createElement(\"div\");\n      div.style.width = width;\n      div.style.height = height;\n      \n      Cesium.Ion.defaultAccessToken = view.model.get(\"token\");\n\n      const viewer = new Cesium.Viewer(div, {\n        terrainProvider: Cesium.createWorldTerrain()\n      });    \n\n      const buildingTileset = viewer.scene.primitives.add(Cesium.createOsmBuildings());   \n\n      viewer.camera.flyTo({\n        destination : Cesium.Cartesian3.fromDegrees(-122.4175, 37.655, 400),\n        orientation : {\n          heading : Cesium.Math.toRadians(0.0),\n          pitch : Cesium.Math.toRadians(-15.0),\n        }\n      });\n      \n      view.el.appendChild(div);\n    }\n    \"\"\"\n    # make sure to include styles\n    _css = \"https://cesium.com/downloads/cesiumjs/releases/1.103/Build/Cesium/Widgets/widgets.css\"\n    default_token = os.environ.get(\"CESIUM_TOKEN\")\n    token = traitlets.Unicode(default_token).tag(sync=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n\n\nm = MapWidget()\nm\n</pre> class MapWidget(anywidget.AnyWidget):     _esm = \"\"\"     function loadScript(src) {       return new Promise((resolve, reject) =&gt; {         let script = Object.assign(document.createElement(\"script\"), {           type: \"text/javascript\",           async: true,           src: src,         });         script.addEventListener(\"load\", resolve);         script.addEventListener(\"error\", reject);         document.body.appendChild(script);       });     };          await loadScript(\"https://cesium.com/downloads/cesiumjs/releases/1.103/Build/Cesium/Cesium.js\");          export function render(view) {            let width = view.model.get(\"width\");       let height = view.model.get(\"height\");                const div = document.createElement(\"div\");       div.style.width = width;       div.style.height = height;              Cesium.Ion.defaultAccessToken = view.model.get(\"token\");        const viewer = new Cesium.Viewer(div, {         terrainProvider: Cesium.createWorldTerrain()       });            const buildingTileset = viewer.scene.primitives.add(Cesium.createOsmBuildings());           viewer.camera.flyTo({         destination : Cesium.Cartesian3.fromDegrees(-122.4175, 37.655, 400),         orientation : {           heading : Cesium.Math.toRadians(0.0),           pitch : Cesium.Math.toRadians(-15.0),         }       });              view.el.appendChild(div);     }     \"\"\"     # make sure to include styles     _css = \"https://cesium.com/downloads/cesiumjs/releases/1.103/Build/Cesium/Widgets/widgets.css\"     default_token = os.environ.get(\"CESIUM_TOKEN\")     token = traitlets.Unicode(default_token).tag(sync=True)     width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)     height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)   m = MapWidget() m In\u00a0[\u00a0]: Copied! <pre>class MapWidget(anywidget.AnyWidget):\n    _esm = \"\"\"\n    function loadScript(src) {\n      return new Promise((resolve, reject) =&gt; {\n        let script = Object.assign(document.createElement(\"script\"), {\n          type: \"text/javascript\",\n          async: true,\n          src: src,\n        });\n        script.addEventListener(\"load\", resolve);\n        script.addEventListener(\"error\", reject);\n        document.body.appendChild(script);\n      });\n    };\n    \n    await loadScript(\"https://cdn.jsdelivr.net/npm/ol@v7.3.0/dist/ol.js\");\n    \n    export function render(view) {\n    \n      let center = view.model.get(\"center\");\n      center.reverse();\n      let zoom = view.model.get(\"zoom\");\n      let width = view.model.get(\"width\");\n      let height = view.model.get(\"height\");\n\n      const div = document.createElement(\"div\");\n      div.style.width = width;\n      div.style.height = height;\n      \n        var map = new ol.Map({\n            target: div,\n            layers: [\n                new ol.layer.Tile({\n                    source: new ol.source.OSM()\n                })\n            ],\n            view: new ol.View({\n                center: ol.proj.fromLonLat(center),\n                zoom: zoom\n            })\n        });\n      view.el.appendChild(div);\n    }\n    \"\"\"\n    # make sure to include styles\n    _css = \"https://cdn.jsdelivr.net/npm/ol@v7.3.0/ol.css\"\n    center = traitlets.List([20, 0]).tag(sync=True, o=True)\n    zoom = traitlets.Int(2).tag(sync=True, o=True)\n    width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)\n    height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)\n\n\nm = MapWidget(center=[20, 0], zoom=2)\nm\n</pre> class MapWidget(anywidget.AnyWidget):     _esm = \"\"\"     function loadScript(src) {       return new Promise((resolve, reject) =&gt; {         let script = Object.assign(document.createElement(\"script\"), {           type: \"text/javascript\",           async: true,           src: src,         });         script.addEventListener(\"load\", resolve);         script.addEventListener(\"error\", reject);         document.body.appendChild(script);       });     };          await loadScript(\"https://cdn.jsdelivr.net/npm/ol@v7.3.0/dist/ol.js\");          export function render(view) {            let center = view.model.get(\"center\");       center.reverse();       let zoom = view.model.get(\"zoom\");       let width = view.model.get(\"width\");       let height = view.model.get(\"height\");        const div = document.createElement(\"div\");       div.style.width = width;       div.style.height = height;                var map = new ol.Map({             target: div,             layers: [                 new ol.layer.Tile({                     source: new ol.source.OSM()                 })             ],             view: new ol.View({                 center: ol.proj.fromLonLat(center),                 zoom: zoom             })         });       view.el.appendChild(div);     }     \"\"\"     # make sure to include styles     _css = \"https://cdn.jsdelivr.net/npm/ol@v7.3.0/ol.css\"     center = traitlets.List([20, 0]).tag(sync=True, o=True)     zoom = traitlets.Int(2).tag(sync=True, o=True)     width = traitlets.Unicode(\"100%\").tag(sync=True, o=True)     height = traitlets.Unicode(\"600px\").tag(sync=True, o=True)   m = MapWidget(center=[20, 0], zoom=2) m"},{"location":"examples/esm/#leaflet","title":"Leaflet\u00b6","text":""},{"location":"examples/esm/#maplibre","title":"Maplibre\u00b6","text":""},{"location":"examples/esm/#mapbox","title":"Mapbox\u00b6","text":""},{"location":"examples/esm/#cesium","title":"Cesium\u00b6","text":""},{"location":"examples/esm/#openlayers","title":"OpenLayers\u00b6","text":""},{"location":"examples/leaflet/","title":"Leaflet","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import mapwidget\n</pre> import mapwidget In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\")\nm\n</pre> m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\") m In\u00a0[\u00a0]: Copied! <pre>m.add_basemap(\"HYBRID\")\n</pre> m.add_basemap(\"HYBRID\") In\u00a0[\u00a0]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\n</pre> m.add_basemap(\"OpenTopoMap\") In\u00a0[\u00a0]: Copied! <pre>from mapwidget.basemaps import get_basemap_list\n\nprint(len(get_basemap_list()))\n</pre> from mapwidget.basemaps import get_basemap_list  print(len(get_basemap_list())) In\u00a0[\u00a0]: Copied! <pre>get_basemap_list()[:10]\n</pre> get_basemap_list()[:10] In\u00a0[\u00a0]: Copied! <pre>m.clicked_latlng\n</pre> m.clicked_latlng In\u00a0[\u00a0]: Copied! <pre>m.center\n</pre> m.center In\u00a0[\u00a0]: Copied! <pre>m.bounds\n</pre> m.bounds In\u00a0[\u00a0]: Copied! <pre>m.zoom\n</pre> m.zoom"},{"location":"examples/mapbox/","title":"Mapbox","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import mapwidget.mapbox as mapwidget\n</pre> import mapwidget.mapbox as mapwidget <p>You need a Mapbox access token to use the Mapbox widget. First, sign up for a free Mapbox account. Then, you can create a token by following the instructions here. Set <code>Mapbox_TOKEN</code> as an environment variable to use the Mapbox widget. Alternatively, uncomment the following code block and replace <code>YOUR-API-TOKEN</code> with your Mapbox access token.</p> In\u00a0[\u00a0]: Copied! <pre># import os\n# os.environ['MAPBOX_TOKEN'] = 'YOUR-API-TOKEN'\n</pre> # import os # os.environ['MAPBOX_TOKEN'] = 'YOUR-API-TOKEN' In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\")\nm\n</pre> m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\") m <p></p> In\u00a0[\u00a0]: Copied! <pre>m.clicked_latlng\n</pre> m.clicked_latlng In\u00a0[\u00a0]: Copied! <pre>m.zoom\n</pre> m.zoom In\u00a0[\u00a0]: Copied! <pre>m.center\n</pre> m.center In\u00a0[\u00a0]: Copied! <pre>m.bounds\n</pre> m.bounds In\u00a0[\u00a0]: Copied! <pre>esm = \"\"\"\n\n    const map = new mapboxgl.Map({\n        container: 'map',\n        zoom: 14,\n        center: [-114.26608, 32.7213],\n        pitch: 80,\n        bearing: 41,\n        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio\n        style: 'mapbox://styles/mapbox/satellite-streets-v12'\n    });\n\n    map.on('style.load', () =&gt; {\n        map.addSource('mapbox-dem', {\n            'type': 'raster-dem',\n            'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n            'tileSize': 512,\n            'maxzoom': 14\n        });\n        // add the DEM source as a terrain layer with exaggerated height\n        map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n    });\n\n\n\"\"\"\n</pre> esm = \"\"\"      const map = new mapboxgl.Map({         container: 'map',         zoom: 14,         center: [-114.26608, 32.7213],         pitch: 80,         bearing: 41,         // Choose from Mapbox's core styles, or make your own style with Mapbox Studio         style: 'mapbox://styles/mapbox/satellite-streets-v12'     });      map.on('style.load', () =&gt; {         map.addSource('mapbox-dem', {             'type': 'raster-dem',             'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',             'tileSize': 512,             'maxzoom': 14         });         // add the DEM source as a terrain layer with exaggerated height         map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });     });   \"\"\" In\u00a0[\u00a0]: Copied! <pre>m.set_esm(esm)\nm\n</pre> m.set_esm(esm) m <p></p> In\u00a0[\u00a0]: Copied! <pre>esm = \"\"\"\n\n    (async () =&gt; {\n        const map = new mapboxgl.Map({\n            container: 'map',\n            zoom: 13,\n            center: [6.6301, 45.35625],\n            pitch: 80,\n            bearing: 160,\n            interactive: false,\n            // Choose from Mapbox's core styles, or make your own style with Mapbox Studio\n            style: 'mapbox://styles/mapbox/satellite-v9'\n        });\n\n        await map.once('style.load');\n\n        // Add daytime fog\n        map.setFog({\n            'range': [-1, 2],\n            'horizon-blend': 0.3,\n            'color': 'white',\n            'high-color': '#add8e6',\n            'space-color': '#d8f2ff',\n            'star-intensity': 0.0\n        });\n\n        // Add 3D terrain\n        map.addSource('mapbox-dem', {\n            'type': 'raster-dem',\n            'url': 'mapbox://mapbox.terrain-rgb',\n            'tileSize': 512,\n            'maxzoom': 14\n        });\n        map.setTerrain({\n            'source': 'mapbox-dem',\n            'exaggeration': 1.5\n        });\n\n        // Run a timing loop to switch between day and night\n        await map.once('idle');\n\n        let lastTime = 0.0;\n        let animationTime = 0.0;\n        let cycleTime = 0.0;\n        let night = true;\n\n        const initialBearing = map.getBearing();\n\n        function frame(time) {\n            const elapsedTime = (time - lastTime) / 1000.0;\n\n            animationTime += elapsedTime;\n            cycleTime += elapsedTime;\n\n            if (cycleTime &gt;= 10.0) {\n                if (night) {\n                    // night fog styling\n                    map.setFog({\n                        'range': [-1, 2],\n                        'horizon-blend': 0.3,\n                        'color': '#242B4B',\n                        'high-color': '#161B36',\n                        'space-color': '#0B1026',\n                        'star-intensity': 0.8\n                    });\n                } else {\n                    // day fog styling\n                    map.setFog({\n                        'range': [-1, 2],\n                        'horizon-blend': 0.3,\n                        'color': 'white',\n                        'high-color': '#add8e6',\n                        'space-color': '#d8f2ff',\n                        'star-intensity': 0.0\n                    });\n                }\n\n                night = !night;\n                cycleTime = 0.0;\n            }\n\n            const rotation = initialBearing + animationTime * 2.0;\n            map.setBearing(rotation % 360);\n\n            lastTime = time;\n\n            window.requestAnimationFrame(frame);\n        }\n\n        window.requestAnimationFrame(frame);\n    })();\n\n\"\"\"\n</pre> esm = \"\"\"      (async () =&gt; {         const map = new mapboxgl.Map({             container: 'map',             zoom: 13,             center: [6.6301, 45.35625],             pitch: 80,             bearing: 160,             interactive: false,             // Choose from Mapbox's core styles, or make your own style with Mapbox Studio             style: 'mapbox://styles/mapbox/satellite-v9'         });          await map.once('style.load');          // Add daytime fog         map.setFog({             'range': [-1, 2],             'horizon-blend': 0.3,             'color': 'white',             'high-color': '#add8e6',             'space-color': '#d8f2ff',             'star-intensity': 0.0         });          // Add 3D terrain         map.addSource('mapbox-dem', {             'type': 'raster-dem',             'url': 'mapbox://mapbox.terrain-rgb',             'tileSize': 512,             'maxzoom': 14         });         map.setTerrain({             'source': 'mapbox-dem',             'exaggeration': 1.5         });          // Run a timing loop to switch between day and night         await map.once('idle');          let lastTime = 0.0;         let animationTime = 0.0;         let cycleTime = 0.0;         let night = true;          const initialBearing = map.getBearing();          function frame(time) {             const elapsedTime = (time - lastTime) / 1000.0;              animationTime += elapsedTime;             cycleTime += elapsedTime;              if (cycleTime &gt;= 10.0) {                 if (night) {                     // night fog styling                     map.setFog({                         'range': [-1, 2],                         'horizon-blend': 0.3,                         'color': '#242B4B',                         'high-color': '#161B36',                         'space-color': '#0B1026',                         'star-intensity': 0.8                     });                 } else {                     // day fog styling                     map.setFog({                         'range': [-1, 2],                         'horizon-blend': 0.3,                         'color': 'white',                         'high-color': '#add8e6',                         'space-color': '#d8f2ff',                         'star-intensity': 0.0                     });                 }                  night = !night;                 cycleTime = 0.0;             }              const rotation = initialBearing + animationTime * 2.0;             map.setBearing(rotation % 360);              lastTime = time;              window.requestAnimationFrame(frame);         }          window.requestAnimationFrame(frame);     })();  \"\"\" In\u00a0[\u00a0]: Copied! <pre>m.set_esm(esm)\nm\n</pre> m.set_esm(esm) m <p></p>"},{"location":"examples/maplibre/","title":"Maplibre","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import mapwidget.maplibre as mapwidget\n</pre> import mapwidget.maplibre as mapwidget In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map()\nm\n</pre> m = mapwidget.Map() m In\u00a0[\u00a0]: Copied! <pre>m.add_call(\"flyTo\", [{\"center\": [-100, 40], \"zoom\": 10}])\n</pre> m.add_call(\"flyTo\", [{\"center\": [-100, 40], \"zoom\": 10}])"},{"location":"examples/openlayers/","title":"Openlayers","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install mapwidget\n</pre> # %pip install mapwidget In\u00a0[\u00a0]: Copied! <pre>import mapwidget.openlayers as mapwidget\n</pre> import mapwidget.openlayers as mapwidget In\u00a0[\u00a0]: Copied! <pre>m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\")\nm\n</pre> m = mapwidget.Map(center=[20, 0], zoom=2, height=\"600px\") m In\u00a0[\u00a0]: Copied! <pre>m.clicked_latlng\n</pre> m.clicked_latlng In\u00a0[\u00a0]: Copied! <pre>m.center\n</pre> m.center In\u00a0[\u00a0]: Copied! <pre>m.zoom\n</pre> m.zoom In\u00a0[\u00a0]: Copied! <pre>m.bounds\n</pre> m.bounds"}]}